C:\Desenv\servers\kafka_2.13-2.4.0\bin\windows>kafka-server-start.bat C:\Desenv\servers\kafka_2.13-2.4.0\config\server.properties

C:\Desenv\servers\apache-zookeeper-3.5.6-bin\apache-zookeeper-3.5.6-bin\bin>zkServer.cmd

bin/kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic LOJA_NOVO_PEDIDO

bin/kafka-topics.sh --list --bootstrap-server localhost:9092

bin/kafka-topics.sh --broker-list localhost:9092
 --topic LOJA_NOVO_PEDIDO

bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic LOJA_NOVO_PEDIDO

bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic LOJA_NOVO_PEDIDO --from-beginning

---

docker:

docker-compose exec kafka bash -c "seq 100 | kafka-console-producer --request-required-acks 1 --broker-list localhost:29092 --topic meu-topico-legal && echo 'Produced 100 messages.'


docker-compose exec kafka kafka-topics --create --topic meu-topico-legal --partitions 1 --replication-factor 1 --if-not-exists --zookeeper localhost:32181

docker-compose exec kafka kafka-console-consumer --bootstrap-server localhost:29092 --topic meu-topico-legal --from-beginning --max-messages 100

C:\Desenv\servers\kafka_2.13-2.4.0\bin\windows>kafka-topics.bat --list --bootstrap-server localhost:9092

C:\Desenv\servers\kafka_2.13-2.4.0\bin\windows>kafka-topics.bat --describe --bootstrap-server localhost:9092

C:\Desenv\servers\kafka_2.13-2.4.0\bin\windows>kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic ECOMMERCE_NEW_ORDER --from-befinning

C:\Desenv\servers\kafka_2.13-2.4.0\bin\windows>kafka-topics.bat --alter --zookeeper localhost:2181 --topic ECOMMERCE_NEW_ORDER --partitions 3

C:\Desenv\servers\kafka_2.13-2.4.0\bin\windows>kafka-consumer-groups.bat --all-groups --bootstrap-server localhost:9092 --describe

for (ConsumerRecord<String, String> consumerRecord : records) {
					System.out.println("----------------------------");
					System.out.println("Order Processada");
					System.out.println(consumerRecord.key());
					System.out.println(consumerRecord.value());
					System.out.println(consumerRecord.partition());
					System.out.println(consumerRecord.offset());
					try {
						Thread.sleep(5000);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
			}

======
